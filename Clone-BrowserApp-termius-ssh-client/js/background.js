// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  chrome.app.runtime.onLaunched.addListener(function() {
    var height, minHeight, minWidth, width;
    width = 1280;
    height = 800;
    minWidth = 640;
    minHeight = 410;
    return chrome.app.window.create('index.html', {
      id: 'main',
      bounds: {
        width: width,
        height: height,
        left: Math.round((screen.availWidth - width) / 2),
        top: Math.round((screen.availHeight - height) / 2)
      },
      minWidth: minWidth,
      minHeight: minHeight
    }, function(createdWindow) {
      return createdWindow.onClosed.addListener(function() {
        var client, e, id, ref, results, uid;
        ref = createdWindow.contentWindow.clients;
        results = [];
        for (uid in ref) {
          client = ref[uid];
          try {
            id = client._sock.id;
          } catch (error) {
            e = error;
            console.log(e);
          }
          results.push(chrome.sockets.tcp.disconnect(id));
        }
        return results;
      });
    });
  });

  chrome.runtime.onInstalled.addListener(function(details) {
    var request;
    if (details.reason === "update") {
      if (details.previousVersion === "0.200.5" && details.previousVersion < chrome.runtime.getManifest().version) {
        chrome.storage.local.remove("host_keys");
      }
      if (details.previousVersion < "0.450.0" && details.previousVersion < chrome.runtime.getManifest().version) {
        chrome.storage.local.get("settings", function(value) {
          var font_size, settings;
          if (value && value.settings) {
            settings = JSON.parse(JSON.parse(value.settings));
            font_size = settings['font-size'];
            if (font_size) {
              chrome.storage.local.set({
                "settings_font_size": font_size
              });
            }
            if (settings.name === "Default" || settings.name === "Dracula") {
              return chrome.storage.local.remove("settings");
            }
          }
        });
        request = window.indexedDB.open("ssh_configs", 1);
        return request.onsuccess = function(event) {
          var cursor_request, db, store, tx;
          db = event.target.result;
          if (indexOf.call(db.objectStoreNames, "ssh_configs") < 0) {
            db.close();
            return;
          }
          tx = db.transaction("ssh_configs", "readwrite");
          store = tx.objectStore("ssh_configs");
          cursor_request = store.openCursor();
          cursor_request.onsuccess = function(e) {
            var cursor;
            cursor = e.target.result;
            if (cursor) {
              if (cursor.value.color_scheme === "default" || cursor.value.color_scheme === "dracula") {
                cursor.value.color_scheme = "basic";
                cursor.update(cursor.value);
              }
              return cursor["continue"]();
            } else {
              return db.close();
            }
          };
          return cursor_request.onerror = function() {
            return db.close();
          };
        };
      }
    }
  });

}).call(this);
