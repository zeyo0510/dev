T.SplitShellsOperation=function(){};
T.SplitShellsOperation.prototype.operate=function(a,b,g){var h=0,d=new T.Raycaster,l=new T.V3(0,0,1),q=new T.V3(0,0,-1);if(b instanceof T.Light)return null;if(1==b.dummy)return a.removeHelper(b),b.parent.remove(b),a.signals.objectRemoved.dispatch(b),null;var c=b.children.slice(0);if(!1!==g)for(var e=0;e<c.length;++e)this.operate(a,c[e],g);if(b instanceof T.Mesh&&(c=this.splitGeometry(b.geometry),b.parent&&c&&1<c.length)){g=T.Object3D.prototype.clone.call(b,void 0,!1);for(e=0;e<c.length;++e){var f=
new T.Mesh(c[e],b.material.clone());f.name="Shell "+h;g.add(f);f.updateMatrixWorld();++h}b.parent.add(g);g.updateMatrixWorld();a.signals.objectAdded.dispatch(g);c=b.children;for(e=0;e<c.length;++e)if(h=c[e],h instanceof T.Measurement&&h.measurementGizmo&&h.measurementGizmo.controlPoints){for(var n,f=h.measurementGizmo.getControlPointsWorld(),p=0;p<f.length;++p){var m=f[p];m.z-=1E-4;d.set(m,l);var k=d.intersectObjects(g.children,!0);k&&0!=k.length||(m.z+=.002,d.set(m,q),k=d.intersectObjects(g.children,
!0));!n&&k&&0<k.length&&(n=k[0].object);h.measurementGizmo.controlPoints[p].object=k&&0<k.length?k[0].object:g}n?n.add(h):g.add(h)}else g.add(h);a.removeHelper(b);b.parent.remove(b);a.signals.objectRemoved.dispatch(b);return g}return b};
T.SplitShellsOperation.prototype.splitGeometry=function(a){if(a&&0!=a.faces.length){a.mergeVertices();a.verticesNeedUpdate=!0;for(var b=T.GeometryUtils.updateEdgeFaces(a),g=[],h=0,d,l=0;h<a.faces.length;){for(d=new T.Geometry;l<a.faces.length&&a.faces[l].deleted;)++l;if(l==a.faces.length)break;T.GeometryUtils.traverseAdjacentFaces(l,a,b,function(b,c,e,f){c=a.faces[b];if(!c||c.deleted)return!1;e=c.clone();f=d.vertices.length;if(c instanceof T.F3)d.vertices.push(a.vertices[c.a]),d.vertices.push(a.vertices[c.b]),
d.vertices.push(a.vertices[c.c]),e.a=f,e.b=f+1,e.c=f+2;else if(c instanceof T.Face4)d.vertices.push(a.vertices[c.a]),d.vertices.push(a.vertices[c.b]),d.vertices.push(a.vertices[c.c]),d.vertices.push(a.vertices[c.d]),e.a=f,e.b=f+1,e.c=f+2,e.d=f+3;else return!1;for(f=0;f<a.faceVertexUvs.length;++f){var g=a.faceVertexUvs[f];g.length>b&&(d.faceVertexUvs[f][d.faces.length]=g[b])}d.faces.push(e);c.deleted=!0;h++;return!0},!0);g.push(d);d.mergeVertices();d.computeBoundingSphere();d.verticesNeedUpdate=!0}return g}};
